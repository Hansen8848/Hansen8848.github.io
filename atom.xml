<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Java学习日志</title>
  
  
  <link href="https://hansen8848.github.io/atom.xml" rel="self"/>
  
  <link href="https://hansen8848.github.io/"/>
  <updated>2023-11-03T15:56:03.634Z</updated>
  <id>https://hansen8848.github.io/</id>
  
  <author>
    <name>Hansen8848</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>继承与多态</title>
    <link href="https://hansen8848.github.io/2023/11/03/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>https://hansen8848.github.io/2023/11/03/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2023-11-03T05:49:43.000Z</published>
    <updated>2023-11-03T15:56:03.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>调用父类的构造方法  </li><li>调用父类的普通方法</li><li>方法重写<ul><li>前置条件（一样的签名和一样或兼容的返回类型）</li><li>实例方法可访问</li><li>静态方法可继承，不可重写，重写会使父类方法隐藏，可通过SuperClassName.staticMethodName 访问</li></ul></li><li>方法重写与重载的区别（@Override)<ul><li>注：一个类中不能给出多个名称和参数相同的方法，即使返回值不一样</li></ul></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态即意味着父类型的变量可以引用子类型的变量 </p><ul><li>动态绑定  <ul><li>方法可在沿着继承链的多个类中实现，最终由变量的实际类型决定</li></ul></li><li>对象转换和instanceof操作符<ul><li>当把一个父类的实例转换为它的子类变量时，使用强制转换（子类名）  也叫向下&#x2F;显示转换</li><li>instanceof 是Java关键字，意为 x是否是y的实例</li></ul></li><li>Object类的equals方法<br>   object1.equals(object2）；&#x2F;&#x2F; 检测两个引用变量是否指向同一个对象</li><li>ArraryList类（列表）<br>  ArraryList<AConcreteType> list &#x3D; new ArraryList&lt;&gt;();<ul><li>list.remove(object&#x2F;index), 当object为正整数时注意用new Integer(v)申明</li></ul></li><li>列表的一些方法<ul><li>从数组创建列表： Arrays.asList(array);</li><li>从数组列表创建对象数组： list.toArray(array1);</li><li>对列表元素排序&#x2F;max&#x2F;min： java.util.Collections.sort&#x2F;max&#x2F;min(list);</li><li>打乱列表元素： java.util.Collection.shuffle(list);</li></ul></li><li>自定义栈类</li></ul><p>###疑问<br>关于toString的使用<br>栈和堆的详细说明</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;调用父类的构造方法  &lt;/li&gt;
&lt;li&gt;调用父类的普通方法&lt;/li&gt;
&lt;li&gt;方法重写&lt;ul&gt;
&lt;li&gt;前置条件（一样的签名和</summary>
      
    
    
    
    
    <category term="java" scheme="https://hansen8848.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程</title>
    <link href="https://hansen8848.github.io/2023/11/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/"/>
    <id>https://hansen8848.github.io/2023/11/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/</id>
    <published>2023-11-02T10:39:42.000Z</published>
    <updated>2023-11-03T05:46:25.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要包装基本数据类型"><a href="#为什么要包装基本数据类型" class="headerlink" title="为什么要包装基本数据类型"></a>为什么要包装基本数据类型</h2><ol><li>便于使用类中的方法<br>例如说 new Integer(int).toString()得到字符串<br> Integer.parseInt(“1A”,16)returns 26;</li></ol><p>How to use:<br>        DOUble d &#x3D; new Double(“5”);&#x2F;&#x2F;5也可以&#x2F;Integer    </p><h3 id="注意自动装箱和自动拆箱（10-8-1）"><a href="#注意自动装箱和自动拆箱（10-8-1）" class="headerlink" title="注意自动装箱和自动拆箱（10.8.1）"></a>注意自动装箱和自动拆箱（10.8.1）</h3><h3 id="BigInteger-BigDecimal类"><a href="#BigInteger-BigDecimal类" class="headerlink" title="BigInteger&#x2F;BigDecimal类"></a>BigInteger&#x2F;BigDecimal类</h3><pre><code>    new BigInteger(String)/BigDecimal(String)      divide(BigDecimal d,int scale,int roundingMode);</code></pre><p>其中scale为小数点后整数位数；roundingMode为舍入方式  </p><h2 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h2><p>构造：Java将字符串字面值看作String对象  </p><ul><li>不可变字符串和驻留字符串   </li><li>替换和拆分字符串  </li><li>使用模式匹配、替换和拆分  <ul><li>*<em>正则表达式（regular expression&#x2F;regex)</em></li></ul></li><li>字符串与数组相互转换<br>  String.toCharArray<br>  String.getChars(int srcBegin,int srcEnd,char[]dst,int dstBegin)</li><li>将字符和数值转化为字符串</li><li>格式化字符串</li></ul><h3 id="StringBuilder-StringButterfly类"><a href="#StringBuilder-StringButterfly类" class="headerlink" title="StringBuilder&#x2F;StringButterfly类"></a>StringBuilder&#x2F;StringButterfly类</h3><p>二者区别<br>####StringBuilder<br>用于需要改变的字符串</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么要包装基本数据类型&quot;&gt;&lt;a href=&quot;#为什么要包装基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;为什么要包装基本数据类型&quot;&gt;&lt;/a&gt;为什么要包装基本数据类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;便于使用类中的方法&lt;br&gt;例如说 new Int</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hansen8848.github.io/2023/11/01/hello-world/"/>
    <id>https://hansen8848.github.io/2023/11/01/hello-world/</id>
    <published>2023-11-01T14:00:58.409Z</published>
    <updated>2023-11-01T14:00:58.409Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
